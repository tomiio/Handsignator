/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef _EI_CLASSIFIER_MODEL_VARIABLES_H_
#define _EI_CLASSIFIER_MODEL_VARIABLES_H_

#include <stdint.h>
#include "model_metadata.h"

#include "tflite-model/tflite_learn_45_compiled.h"
#include "edge-impulse-sdk/classifier/ei_model_types.h"
#include "edge-impulse-sdk/classifier/inferencing_engines/engines.h"

const char* ei_classifier_inferencing_categories[] = { "a", "aa", "b", "c", "cam_on", "d", "e", "n", "o", "q", "ten", "toi", "tuyet_voi", "xin_chao", "xin_loi" };

uint8_t ei_dsp_config_125_axes[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 };
const uint32_t ei_dsp_config_125_axes_size = 36;
ei_dsp_config_raw_t ei_dsp_config_125 = {
    125, // uint32_t blockId
    1, // int implementationVersion
    36, // int length of axes
    1.0f // float scale-axes
};

const size_t ei_dsp_blocks_size = 1;
ei_model_dsp_t ei_dsp_blocks[ei_dsp_blocks_size] = {
    { // DSP block 125
        1800,
        &extract_raw_features,
        (void*)&ei_dsp_config_125,
        ei_dsp_config_125_axes,
        ei_dsp_config_125_axes_size
    }
};
const ei_config_tflite_eon_graph_t ei_config_tflite_graph_45 = {
    .implementation_version = 1,
    .model_init = &tflite_learn_45_init,
    .model_invoke = &tflite_learn_45_invoke,
    .model_reset = &tflite_learn_45_reset,
    .model_input = &tflite_learn_45_input,
    .model_output = &tflite_learn_45_output,
};

const ei_learning_block_config_tflite_graph_t ei_learning_block_config_45 = {
    .implementation_version = 1,
    .block_id = 45,
    .object_detection = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .output_data_tensor = 0,
    .output_labels_tensor = 1,
    .output_score_tensor = 2,
    .quantized = 0,
    .compiled = 1,
    .graph_config = (void*)&ei_config_tflite_graph_45
};

const size_t ei_learning_blocks_size = 1;
const ei_learning_block_t ei_learning_blocks[ei_learning_blocks_size] = {
    {
        &run_nn_inference,
        (void*)&ei_learning_block_config_45,
        EI_CLASSIFIER_IMAGE_SCALING_NONE,
    },
};

const ei_model_performance_calibration_t ei_calibration = {
    1, /* integer version number */
    false, /* has configured performance calibration */
    (int32_t)(EI_CLASSIFIER_RAW_SAMPLE_COUNT / ((EI_CLASSIFIER_FREQUENCY > 0) ? EI_CLASSIFIER_FREQUENCY : 1)) * 1000, /* Model window */
    0.8f, /* Default threshold */
    (int32_t)(EI_CLASSIFIER_RAW_SAMPLE_COUNT / ((EI_CLASSIFIER_FREQUENCY > 0) ? EI_CLASSIFIER_FREQUENCY : 1)) * 500, /* Half of model window */
    0   /* Don't use flags */
};

const ei_impulse_t impulse_248779_2 = {
    .project_id = 248779,
    .project_owner = "Tom",
    .project_name = "handsignator",
    .deploy_version = 2,

    .nn_input_frame_size = 1800,
    .raw_sample_count = 50,
    .raw_samples_per_frame = 36,
    .dsp_input_frame_size = 50 * 36,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 20,
    .frequency = 50,
    .dsp_blocks_size = ei_dsp_blocks_size,
    .dsp_blocks = ei_dsp_blocks,
    
    .object_detection = 0,
    .object_detection_count = 0,
    .object_detection_threshold = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .fomo_output_size = 0,
    
    .tflite_output_features_count = 15,
    .learning_blocks_size = ei_learning_blocks_size,
    .learning_blocks = ei_learning_blocks,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .sensor = EI_CLASSIFIER_SENSOR_FUSION,
    .fusion_string = "a0x + a0y + a0z + g0x + g0y + g0z + a1x + a1y + a1z + g1x + g1y + g1z + a2x + a2y + a2z + g2x + g2y + g2z + a3x + a3y + a3z + g3x + g3y + g3z + a4x + a4y + a4z + g4x + g4y + g4z + a5x + a5y + a5z + g5x + g5y + g5z",
    .slice_size = (50/4),
    .slices_per_model_window = 4,

    .has_anomaly = 0,
    .label_count = 15,
    .calibration = ei_calibration,
    .categories = ei_classifier_inferencing_categories
};

const ei_impulse_t ei_default_impulse = impulse_248779_2;

#endif // _EI_CLASSIFIER_MODEL_METADATA_H_
